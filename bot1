-- Fermer account

getgenv().Config = {
["StorageAccount"] = "artem12artem16",
["PetName"] = "winter_2024_frostclaw",
["PerPotionPet"] = 10
}

local StorageAccount = getgenv().Config["StorageAccount"]
local petName = getgenv().Config["PetName"]
local PerPotion = getgenv().Config["PerPotionPet"]

local clientData = require(game.ReplicatedStorage.ClientModules.Core.ClientData)
local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]

local pet_age_potion = 0
for _, item in pairs(playerData.inventory.food or {}) do
    if item.kind == "pet_age_potion" then
        pet_age_potion += 1
    end
end

local NeedPets = math.floor(pet_age_potion / PerPotion)

-- Console
print("[INFO] Loading information | Farmer Account")
print("-----------------------------------------")
print("[INFO] Age-Potion: "..pet_age_potion)
print("[INFO] Need pets: "..NeedPets)

-- Dehash script
loadstring(game:HttpGet("https://raw.githubusercontent.com/Rano194/Rano194/refs/heads/main/Dehash"))()
print("[INFO] loading dehash remote")

-- Post request need pets
local requestFunc = syn and syn.request or http_request or request

local res = requestFunc({ Url = "https://farmertester.pythonanywhere.com/getpets?nick="..game.Players.LocalPlayer.Name.."&add_count="..NeedPets, Method = "GET" })
local data = game:GetService("HttpService"):JSONDecode(res.Body)

-- Начинаем цикл получения петов
local time = NeedPets

while true do
    task.wait(3)

    if time <= 0 then
        break
    end

    local args = {
        game:GetService("Players"):WaitForChild(StorageAccount)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(unpack(args))

    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == true then
        task.wait(1)
        print("[INFO] Accept trade")
        print("[INFO] Need pets: " .. time)
        
        local result = math.min(time, 18)

        while true do
            task.wait(0.5)
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()

            if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == false then
                game.Players.LocalPlayer.PlayerGui.DialogApp.Dialog.Visible = false
                print("[INFO] Finish trade | Claimed Pets: " .. result)
                time = time - result
                task.wait(5)
                break
            end
        end
    end
end


print("[INFO] Done claimed pets: "..NeedPets)

-- Авто юзаем зелья

local RS = game:GetService("ReplicatedStorage")
local successCount = 0

while true do
    if successCount == NeedPets then
        break
    end
    local agePotions = {}
    for _, item in pairs(playerData.inventory.food or {}) do
        if item.kind == "pet_age_potion" then
            table.insert(agePotions, item)
            if #agePotions >= PerPotion then break end
        end
    end
    if #agePotions < PerPotion then
        warn("Недостаточно age potion (" .. #agePotions .. "/" .. PerPotion .. ")")
        break
    end

    -- Ищем подходящего пета
    local selectedPet = nil
    for _, pet in pairs(playerData.inventory.pets or {}) do
        if pet.kind == petName and pet.properties.age < 6 then
            selectedPet = pet
            break
        end
    end
    if not selectedPet then
        warn("Нет подходящего пета")
        break
    end

    -- Экипировка
    RS.API["ToolAPI/Equip"]:InvokeServer(selectedPet.unique, {
        use_sound_delay = true,
        equip_as_last = false
    })
    RS.API["ToolAPI/Equip"]:InvokeServer(agePotions[1].unique, {
        use_sound_delay = true,
        equip_as_last = false
    })

    task.wait()

    -- Подготовка массива уникальных ID зелий
    local potionUniques = {}
    for i = 1, PerPotion - 1 do -- -1, потому что последний пойдёт как `unique_id`
        table.insert(potionUniques, agePotions[i].unique)
    end

    -- Создание пета
    local success, err = pcall(function()
        RS.API["PetObjectAPI/CreatePetObject"]:InvokeServer(
            "__Enum_PetObjectCreatorType_2",
            {
                additional_consume_uniques = potionUniques,
                pet_unique = selectedPet.unique,
                unique_id = agePotions[PerPotion].unique
            }
        )
    end)

    if not success then
        warn("❌ Ошибка создания пета:", err)
        break
    end

    task.wait(0.1)

    -- Кормление
    local petModel = workspace:WaitForChild("PetObjects"):FindFirstChildWhichIsA("Model")
    if petModel then
        RS.API["PetAPI/ConsumeFoodObject"]:FireServer(petModel, selectedPet.unique)
    else
        warn("❗ Модель пета не найдена для кормления")
    end

    successCount += 1
    print("✅ Успешно обработано петов: " .. successCount)

    task.wait(0.2)
end

-- Функция получения петов

function GetFilteredPets(petName, maxCount)
    local playerData = clientData.get_data()[tostring(game.Players.LocalPlayer)]
    local filteredPets = {}

    for _, pet in pairs(playerData.inventory.pets or {}) do
        if #filteredPets >= maxCount then
            break
        end

        if pet.kind == petName then
            table.insert(filteredPets, pet)
        end
    end

    return filteredPets
end

-- Отправляем петов обратно
local canceled = false

while true do
    task.wait(3)
    local args = {
	game:GetService("Players"):WaitForChild(StorageAccount)
    }
    game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/SendTradeRequest"):FireServer(unpack(args))
    if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == true then
        task.wait(1)
        print("[INFO] Accept trade")
        local pets = GetFilteredPets(petName, 18)
        for i, pet in ipairs(pets) do
            if #pets < 18 then
                canceled = true
            end
            local args = {pet.unique}
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AddItemToOffer"):FireServer(unpack(args))
        end
        while true do
            task.wait(0.5)
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/AcceptNegotiation"):FireServer()
            game:GetService("ReplicatedStorage"):WaitForChild("API"):WaitForChild("TradeAPI/ConfirmTrade"):FireServer()
            if game:GetService("Players").LocalPlayer.PlayerGui.TradeApp.Frame.Visible == false then
                task.wait(3)
                print("[INFO] Finish trade")
                break
            end
        end
        if canceled == true then
            break
        end
    end
end
